@name The Big E's Mesh Build Tutorial [UPDATED V2.1]
@inputs Base:entity
@outputs
@persist
@trigger

local P2M = p2mCreate(1, Base:pos(), Base:angles())
#tells the e2 to generate a P2M controller, sets its index, and tells it to base its position and angle on that of the BASE:entity that the e2 is wired to

local P2M = p2mCreate(2, Base:pos(), Base:angles())
#if you have multiple mesh controllers, you'll need to give each controller a different index, which is the first number in the parenthesis

#all of the controllers can be defined by the same variable, as long as they have different indexes.


P2M:p2mPushModel(  #like holoCreate but for E2M, tells the e2 to start making a new mesh component     
    
    1,             #tells the e2 which material/mesh this mesh component will be rendered as          
    
    "models/lazpack/stands/kc108.mdl",     #tells the mesh what model you want            
    
    array(0),                   #defines which submaterials to hide on the model, set to 0 to not hide any. To hide multiple submats you would put a comma after the first submat number.

    
    vec(7, -10, 12),           #defines the position of the mesh component relative to the mesh controller it is parented to
    
    ang(0.004, -179.954, -0.994),      #defines the angle of the mesh component relative to the mesh controller it is parented to
    
    vec(0.400, 0.400, 0.400),           #defines the scale of the mesh component relative to the overall scale of the mesh controller it is parented to
    
    0,                                  #enables or disables renderinside, which essentially doubles the number of tris being rendered by rendering both the inside and outside of the faces constructing the model.
                                        #Only use this if you want to create an interior for a mesh component that doesnt already have one.
    
    0,                                  #enables or disables renderflat, which enables or disables smooth shading (makes edges look round) on the selected mesh component.
    
    (4*7)+(4*10*11*4),                                  #sets the bodygroup of the mesh component. Only 1 number is used, so all combinations of bodygroups are on one set list. 
                                        #Explanation of bodygroups
                                        #Each and every single possible combination of bodygroups a model can have set is numbered in a list.
                                        #To get the number for your specific desired combination of bodygroups, you'll need to do some math.
                                        #First, you'll want to find the total number of options the model has for each bodygroup.
                                        #Then, you'll multiply the total number of options per bodygroup together, looking like this:
                                        #(4*10*11*12*8*4*4) This combination is specfic to this model.
                                        #If you wanted to manipulate the 4th bodygroup, you'd keep the first 3 numbers the same while only changing the 4th one, and then you'd delete all numbers after the 4th one.
                                        #If you wanted to change multiple different bodygroups, you'd repeat the same process for each bodygroup, and then you'd add the resulting numbers/expressions together.
                                        #For example: (4*5)+(4*10*11*9)+(4*10*11*12*8*4*1)
                                        #You could either directly input this expression into the bodygroup setting or you could simplify it to a single number.
                                        
                                            
    
    
    
    
    
    array(                              #contains all the holoclipping data for this mesh controller. Each mesh component has the same limit on clips as a holo does, so 5 clips per mesh component on windows machines, etc etc.
                                        #this array can be deleted as a whole if the component is not clipped at all.
    
        vec(0, 0, 0),                   #magnitude vector for first clip, defines how far you want the clip to go in each direction.
    
        vec(0, 0, 0),                   #direction vector for first clip, defines the direction the clip faces.
     
        vec(0, 0, 0),                   #magnitude vector for second clip.
   
        vec(0, 0, 0)                    #direction vector for second clip.
        )
    )


P2M:p2mPushModel(2,"models/mechanics/gears2/vert_12t1.mdl",vec(7,10,12),ang(0,-180,-90),vec(0.4,0.4,0.4),0,0,0,array(vec(0,0,0),vec(-0.3,-1,0),vec(0,0,0),vec(-1.000, 0.300, 0.000)))
#this is how mesh componenets will appear in standard use.
# this mesh component is linked to the second mesh controller, 
# as indicated by its index matching with that of the second controller's (2).





P2M:p2mPushModel(1, table(        #this method of creating a mesh component is more reminiscent of doing work with holos.

"model" = "models/sprops/rectangles/size_2/rect_12x12x3.mdl",   #the different aspects of this should be pretty self-explanitory.

"pos" = vec(0,0,20),

"scale" = vec(1,1,1),

"ang" = ang(0,0,0),

"clips" = array(vec(0,0,0),vec(0,0,0)),   #first vector is magnitude, second vector is direction.

"bodygroup" = 0,                            #works the same as in the above method of creating a mesh component.

"inside" = 0,

"flat" = 0

#"submaterial" = array(1)


))


P2M:p2mPushModel(2, table("model" = "models/sprops/rectangles/size_2/rect_12x12x3.mdl","pos" = vec(0,0,-10),"scale" = vec(1,1,1),"ang" = ang(0,0,0),"clips" = array(vec(0,0,0),vec(0,0,0)),"bodygroup" = 0,"inside" = 0,"flat" = 0))
#this is how this form of creating a mesh component may look during standard use.








P2M:p2mBuild()
#tells the controller to build the mesh once all the mesh components are defined
#will build all meshes under the defined variable, even if they have different indexes



P2M:p2mSetParent(Base)
#parents the mesh controller to a defined prop or entity

P2M:p2mSetMaterial(1,"bobsters_trains/br_hazard")
P2M:p2mSetMaterial(2,"models/proppertextures/aluminum")
#sets the material of the mesh controller/the entire mesh

P2M:p2mSetColor(1,vec(255,255,255))
#sets the color of the mesh controller/the entire mesh

P2M:p2mSetUV(1,5)
#controls the scale of the textures applied to the mesh
#first number is mesh index, second number is mesh scale

P2M:p2mSetAng(Base:toWorld(ang(0,0,0)))
#sets the angle of the mesh controller

P2M:p2mSetPos(Base:toWorld(vec(0,0,0)))
#sets the position of the mesh controller

P2M:p2mSetScale(1,vec(1,1,1))
#sets the scale of the entire mesh
#first number is mesh index, second is scale vector

P2M:p2mSetModel("models/sprops/cuboids/height06/size_1/cube_6x6x6.mdl")
#sets the model of the mesh controller

P2M:p2mSetNodraw(0)
#defines if the mesh controller is visible or not
#0 is visible, 1 is invisible, if setNodraw isnt present in the e2 it defaults to 1
















